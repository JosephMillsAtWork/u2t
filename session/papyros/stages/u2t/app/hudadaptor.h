/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -m -a hudadaptor -i huddbus.h -l HUDDBus /home/joseph/ubuntu-tv/shell/app/hud.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef HUDADAPTOR_H_1349053992
#define HUDADAPTOR_H_1349053992

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "huddbus.h"
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;

/*
 * Adaptor class for interface com.canonical.Unity2d.HUD
 */
class HUDAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.canonical.Unity2d.HUD")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface xmlns:dox=\"http://www.ayatana.org/dbus/dox.dtd\" name=\"com.canonical.Unity2d.HUD\">\n"
"    <dox:d>\n"
"          An interface to control the HUD in Unity-2d.\n"
"        </dox:d>\n"
"    <property access=\"readwrite\" type=\"b\" name=\"active\">\n"
"      <dox:d>True if the HUD is active</dox:d>\n"
"    </property>\n"
"    <property access=\"read\" type=\"i\" name=\"screen\">\n"
"      <dox:d>The screen with the HUD</dox:d>\n"
"    </property>\n"
"    <signal name=\"activeChanged\">\n"
"      <dox:d>Signals when the active status of the HUD changes</dox:d>\n"
"      <arg direction=\"out\" type=\"b\" name=\"active\">\n"
"        <dox:d>True if the HUD is active</dox:d>\n"
"      </arg>\n"
"    </signal>\n"
"    <signal name=\"screenChanged\">\n"
"      <dox:d>Signals when the screen changes</dox:d>\n"
"      <arg direction=\"out\" type=\"i\" name=\"active\">\n"
"        <dox:d>The screen with the HUD</dox:d>\n"
"      </arg>\n"
"    </signal>\n"
"  </interface>\n"
        "")
public:
    HUDAdaptor(HUDDBus *parent);
    virtual ~HUDAdaptor();

    inline HUDDBus *parent() const
    { return static_cast<HUDDBus *>(QObject::parent()); }

public: // PROPERTIES
    Q_PROPERTY(bool active READ active WRITE setActive)
    bool active() const;
    void setActive(bool value);

    Q_PROPERTY(int screen READ screen)
    int screen() const;

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
    void activeChanged(bool active);
    void screenChanged(int active);
};

#endif
